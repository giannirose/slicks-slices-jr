{"version":3,"sources":["webpack:///./src/components/pagination.js","webpack:///./src/pages/slicemasters.js"],"names":["PaginationStyles","styled","div","Pagination","pageSize","totalCount","currentPage","skip","base","totalPages","Math","ceil","prevPage","nextPage","hasNextPage","hasPrevPage","console","log","title","disabled","to","className","Array","from","length","map","_","i","key","SlicemasterGrid","SlicemasterStyles","SlicemastersPage","data","pageContext","slicemasters","nodes","SEO","parseInt","process","person","id","slug","current","name","fluid","image","asset","description","query"],"mappings":"uPAIMA,EAAmBC,IAAOC,IAAV,+EAAGD,CAAH,iVA0BP,SAASE,EAAT,GAMX,IALFC,EAKC,EALDA,SACAC,EAIC,EAJDA,WACAC,EAGC,EAHDA,YACAC,EAEC,EAFDA,KACAC,EACC,EADDA,KAGMC,EAAaC,KAAKC,KAAKN,EAAaD,GACpCQ,EAAWN,EAAc,EACzBO,EAAWP,EAAc,EACzBQ,EAAcD,GAAYJ,EAC1BM,EAAcH,GAAY,EAShC,OAPAI,QAAQC,IAAIR,GACZO,QAAQC,IAAIZ,GACZW,QAAQC,IAAIb,GACZY,QAAQC,IAAIV,GACZS,QAAQC,IAAIH,GACZE,QAAQC,IAAIF,GAGV,kBAACf,EAAD,KACE,kBAAC,IAAD,CACEkB,MAAM,YACNC,UAAWJ,EACXK,GAAOZ,EAAL,IAAaI,GAEf,0BAAMS,UAAU,QAAhB,YAEDC,MAAMC,KAAK,CAAEC,OAAQf,IAAcgB,KAAI,SAACC,EAAGC,GAAJ,OACtC,kBAAC,IAAD,CACEN,UAA2B,IAAhBf,GAA2B,IAANqB,EAAU,UAAY,GACtDP,GAAOZ,EAAL,KAAamB,EAAI,EAAIA,EAAI,EAAI,IAC/BC,IAAG,OAASD,GAEXA,EAAI,MAGT,kBAAC,IAAD,CACET,MAAM,YACNC,UAAWL,EACXM,GAAOZ,EAAL,IAAaK,GAEf,0BAAMQ,UAAU,QAAhB,a,gBCnEFQ,EAAkB5B,IAAOC,IAAV,oFAAGD,CAAH,2FAMf6B,EAAoB7B,IAAOC,IAAV,sFAAGD,CAAH,qUA2BR,SAAS8B,EAAT,GAAkD,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,YACzCC,EAAeF,EAAKE,aAAaC,MAGvC,OAFAnB,QAAQC,IAAIiB,GAGV,oCACE,kBAACE,EAAA,EAAD,CAAKlB,MAAK,wBAAyBe,EAAY3B,aAAe,KAC9D,kBAACH,EAAD,CACEC,SAAUiC,SAASC,KACnBjC,WAAY2B,EAAKE,aAAa7B,WAC9BC,YAAa2B,EAAY3B,aAAe,EACxCC,KAAM0B,EAAY1B,KAClBC,KAAK,kBAEP,kBAACqB,EAAD,KACGK,EAAaT,KAAI,SAACc,GAAD,OAChB,kBAACT,EAAD,CAAmBF,IAAKW,EAAOC,IAC7B,kBAAC,IAAD,CAAMpB,GAAE,gBAAkBmB,EAAOE,KAAKC,SACpC,4BACE,0BAAMrB,UAAU,QAAQkB,EAAOI,QAGnC,kBAAC,IAAD,CAAKC,MAAOL,EAAOM,MAAMC,MAAMF,QAC/B,uBAAGvB,UAAU,eAAekB,EAAOQ,mBAQxC,IAAMC,EAAK","file":"component---src-pages-slicemasters-js-2905dd8744000ba3ed0a.js","sourcesContent":["import React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\n\nconst PaginationStyles = styled.div`\n  display: flex;\n  align-content: center;\n  align-items: center;\n  justify-items: center;\n  border: 1px solid var(--grey);\n  margin: 2rem 0;\n  border-radius: 5px;\n  text-align: center;\n  & > * {\n    padding: 1rem;\n    flex: 1;\n    border-right: 1px solid var(--grey);\n    text-decoration: none;\n    &[aria-current],\n    /* The same element, but with the class of current */\n    &.current {\n      color: var(--red);\n    }\n    &[disabled] {\n      pointer-events: none;\n      color: var(--grey);\n    }\n  }\n`;\n\nexport default function Pagination({\n  pageSize,\n  totalCount,\n  currentPage,\n  skip,\n  base,\n}) {\n  // make some variables\n  const totalPages = Math.ceil(totalCount / pageSize);\n  const prevPage = currentPage - 1;\n  const nextPage = currentPage + 1;\n  const hasNextPage = nextPage <= totalPages;\n  const hasPrevPage = prevPage >= 1;\n\n  console.log(totalPages);\n  console.log(totalCount);\n  console.log(pageSize);\n  console.log(skip);\n  console.log(hasNextPage);\n  console.log(hasPrevPage);\n\n  return (\n    <PaginationStyles>\n      <Link\n        title=\"prev Page\"\n        disabled={!hasPrevPage}\n        to={`${base}/${prevPage}`}\n      >\n        <span className=\"word\"> &#8592; Prev</span>\n      </Link>\n      {Array.from({ length: totalPages }).map((_, i) => (\n        <Link\n          className={currentPage === 1 && i === 0 ? 'current' : ''}\n          to={`${base}/${i > 0 ? i + 1 : ''}`}\n          key={`page${i}`}\n        >\n          {i + 1}\n        </Link>\n      ))}\n      <Link\n        title=\"Next Page\"\n        disabled={!hasNextPage}\n        to={`${base}/${nextPage}`}\n      >\n        <span className=\"word\"> &#8594; Next</span>\n      </Link>\n    </PaginationStyles>\n  );\n}\n","import React from 'react';\nimport { graphql, Link } from 'gatsby';\nimport Img from 'gatsby-image';\nimport styled from 'styled-components';\nimport Pagination from '../components/pagination';\nimport SEO from '../components/SEO';\n\nconst SlicemasterGrid = styled.div`\n  display: grid;\n  grid-gap: 2rem;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n`;\n\nconst SlicemasterStyles = styled.div`\n  a {\n    text-decoration: none;\n  }\n  .gatsby-image-wrapper {\n    height: 400px;\n  }\n  h2 {\n    transform: rotate(-2deg);\n    text-align: center;\n    font-size: 4rem;\n    margin-bottom: -2rem;\n    position: relative;\n    z-index: 2;\n  }\n  .description {\n    background: var(--yellow);\n    padding: 1rem;\n    margin: 2rem;\n    margin-top: -6rem;\n    z-index: 2;\n    position: relative;\n    transform: rotate(1deg);\n    text-align: center;\n  }\n`;\n\nexport default function SlicemastersPage({ data, pageContext }) {\n  const slicemasters = data.slicemasters.nodes;\n  console.log(slicemasters);\n\n  return (\n    <>\n      <SEO title={`Slicemasters - Page ${pageContext.currentPage || 1}`} />\n      <Pagination\n        pageSize={parseInt(process.env.GATSBY_PAGE_SIZE)}\n        totalCount={data.slicemasters.totalCount}\n        currentPage={pageContext.currentPage || 1}\n        skip={pageContext.skip}\n        base=\"/slicemasters\"\n      />\n      <SlicemasterGrid>\n        {slicemasters.map((person) => (\n          <SlicemasterStyles key={person.id}>\n            <Link to={`/slicemaster/${person.slug.current}`}>\n              <h2>\n                <span className=\"mark\">{person.name}</span>\n              </h2>\n            </Link>\n            <Img fluid={person.image.asset.fluid} />\n            <p className=\"description\">{person.description}</p>\n          </SlicemasterStyles>\n        ))}\n      </SlicemasterGrid>\n    </>\n  );\n}\n\nexport const query = graphql`\n  query($skip: Int = 0, $pageSize: Int = 2) {\n    slicemasters: allSanityPerson(limit: $pageSize, skip: $skip) {\n      totalCount\n      nodes {\n        name\n        id\n        slug {\n          current\n        }\n        description\n        image {\n          asset {\n            fluid(maxWidth: 410) {\n              ...GatsbySanityImageFluid\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}